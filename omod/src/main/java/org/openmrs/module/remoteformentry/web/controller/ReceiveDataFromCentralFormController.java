package org.openmrs.module.remoteformentry.web.controller;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.io.filefilter.SuffixFileFilter;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.openmrs.api.context.Context;
import org.openmrs.module.formentry.FormEntryUtil;
import org.openmrs.module.remoteformentry.RemoteFormEntryConstants;
import org.openmrs.module.remoteformentry.RemoteFormEntryService;
import org.openmrs.module.remoteformentry.RemoteFormEntryUtil;
import org.openmrs.module.remoteformentry.web.ReturnDataToRemoteDownloadServlet;
import org.openmrs.util.OpenmrsUtil;
import org.openmrs.web.WebConstants;
import org.springframework.validation.BindException;
import org.springframework.validation.Errors;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.SimpleFormController;

/**
 * Controller to accept a zip file generated at central.  The file was generated by the returnDataToRemote form and 
 * the ReturnDataToRemoteDownloadServlet
 */
public class ReceiveDataFromCentralFormController extends SimpleFormController {
	
    /** Logger for this class and subclasses */
    protected final Log log = LogFactory.getLog(getClass());

    /**
     * @see org.springframework.web.servlet.mvc.AbstractFormController#formBackingObject(javax.servlet.http.HttpServletRequest)
     */
    protected Object formBackingObject(HttpServletRequest request) throws ServletException {
		
    	// this page has no need for data on the front end.  Its only submitting a zip file
        return "";
    }
    
	/**
     * @see org.springframework.web.servlet.mvc.SimpleFormController#onSubmit(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, java.lang.Object, org.springframework.validation.BindException)
     */
    @Override
    protected ModelAndView onSubmit(HttpServletRequest request, HttpServletResponse response, Object object, BindException bindException) throws Exception {
	    
    	// user must be authenticated (avoids auth errors)
    	if (Context.isAuthenticated()) {
    		
    		File remoteFormEntryDirectory = OpenmrsUtil.getDirectoryInApplicationDataDirectory("remoteformentry");
			File importDirectory = new File(remoteFormEntryDirectory, RemoteFormEntryConstants.RECEIVE_FILES_DIRECTORY_NAME);
			if (!importDirectory.exists()) {
				importDirectory.mkdir();
			}
    		
			// they're uploading/importing a remote queue zip file...
			
			if (request instanceof MultipartHttpServletRequest) {
				HttpSession httpSession = request.getSession();
				httpSession.setMaxInactiveInterval(-1); // don't let the session expire 
				RemoteFormEntryService remoteService = (RemoteFormEntryService)Context.getService(RemoteFormEntryService.class);
				MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest)request;
				MultipartFile returnedData = multipartRequest.getFile("returnedData");
				if (returnedData != null && !returnedData.isEmpty()) {
					
					// copy the request file to the import dir in the application data dir
					File receiveFileFromRequest = new File(importDirectory, returnedData.getOriginalFilename());
					OutputStream receiveDirOutputStream = new FileOutputStream(receiveFileFromRequest);
					InputStream inputStreamFromRequest = returnedData.getInputStream();
					OpenmrsUtil.copyFile(inputStreamFromRequest, receiveDirOutputStream);
					inputStreamFromRequest.close();
					
					// open that newly saved file for input to the zip
					InputStream inputStreamFromFile = new FileInputStream(receiveFileFromRequest);
					
					// load the generatedData file in the uploaded zip into the db
					ZipInputStream zis = new ZipInputStream(inputStreamFromFile);
					
					File tempDir = FormEntryUtil.createTempDirectory("returnedData");
					File ackDir = new File(tempDir, ReturnDataToRemoteDownloadServlet.ACK_DIR);
					ackDir.mkdir();
					
					// write the zip to the temp folder
					int buffer = 2048;
					BufferedOutputStream dest = null;
					ZipEntry entry;
					while((entry = zis.getNextEntry()) != null) {
						String pathName = entry.getName();
						try {
							log.debug("Extracting: " + entry);
							// do the writing to the disk
							int count;
							byte data[] = new byte[buffer];
							
							File file = new File(tempDir, pathName);
							FileOutputStream fos = new FileOutputStream(file);
							dest = new BufferedOutputStream(fos, buffer);
							while ((count = zis.read(data, 0, buffer)) != -1) {
								dest.write(data, 0, count);
							}
							dest.flush();
							dest.close();
						}
						catch(Exception e) {
							log.error("The pending dir couldn't be written to for: " + pathName, e);
						}
					}
					zis.close();
					
					// use the zipped ack file to determine what can be pulled off
					// of the pending queue
					remoteService.receiveAckDirFromCentral(ackDir);
					
					// exec the received sql scripts
					File generatedData = new File(tempDir, RemoteFormEntryUtil.GENERATED_DATA_FILENAME);
					remoteService.receiveGeneratedDataFromCentral(generatedData);
					
					// exec the other received sql scripts
					for (File file : tempDir.listFiles((FileFilter)new SuffixFileFilter("sql"))) {
						log.debug("receiving sql: " + file.getName());
						remoteService.receiveGeneratedDataFromCentralForLocation(file);
					}
					
					// clean up the temp directory for the update
					OpenmrsUtil.deleteDirectory(tempDir);
					
					// show the normal thank you and congrats message.
					httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR, "remoteformentry.receiveDataFromCentral.success");

					// check the pending queue and send a note to the user if there are still some left
					int pendingQueueSize = remoteService.getRemoteFormEntryPendingQueueSize();
					
					if (pendingQueueSize > 0) {
						// show them an error saying that there are still pending queue items
						httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR, "remoteformentry.receiveDataFromCentral.pending");
						httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ARGS, pendingQueueSize);
					}
					
				}
				else {
					httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR, "remoteformentry.receiveDataFromCentral.error");
				}
			}
    	}
    	
	    return showForm(request, response, bindException);
    }

    /**
     * @see org.springframework.web.servlet.mvc.SimpleFormController#referenceData(javax.servlet.http.HttpServletRequest, java.lang.Object, org.springframework.validation.Errors)
     */
    protected Map<String, Object> referenceData(HttpServletRequest request, Object command, Errors errors) throws Exception {
		File remoteFormEntryDirectory = OpenmrsUtil.getDirectoryInApplicationDataDirectory("remoteformentry");
		File recieveFilesDirectory = new File(remoteFormEntryDirectory, RemoteFormEntryConstants.RECEIVE_FILES_DIRECTORY_NAME);
		if (!recieveFilesDirectory.exists()) {
			recieveFilesDirectory.mkdir();
		}
		
		Map<String, Object> map = new HashMap<String, Object>();
		
		
		Map<String, Object> importedFiles = new LinkedHashMap<String, Object>();
		for (File file : recieveFilesDirectory.listFiles()) {
			importedFiles.put(file.getName(), new Date(file.lastModified()));
		}
		
		map.put("receivedFiles", importedFiles);
		map.put("receiveFilesDirectory", recieveFilesDirectory.getAbsolutePath());
		
	    return map;
    }
	
}
